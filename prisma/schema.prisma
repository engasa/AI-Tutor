datasource db {
  provider = "sqlserver"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//Aadil removed below 4 lines due to sqlserver database instead of postgres database 
//enum UserType {
//  STUDENT
// INSTRUCTOR
//}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  userType	String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notes         Note[]
  password	Password?
  instructions  Instruction[]  @relation("UserInstructions")
  questions     Question[]     @relation("UserQuestions")
  files         File[]         // Relation to File removed courseId
}



model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model Question {
  id            String        @id @default(cuid())
  title         String
  body          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     User?         @relation("UserQuestions", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId        String?
  instructionId String?       // Removed @unique
  instruction   Instruction?  @relation(fields: [instructionId], references: [id], onDelete: SetNull)
  tags          Tag[]
}

model Instruction {
  id         String     @id @default(cuid())
  title      String
  content    String
  isDefault  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdBy  User	@relation("UserInstructions", fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  userId     String
  questions  Question[] // Explicitly define the one-to-many relationship
}


model File {
  id        String   @id @default(cuid())
  name      String
  path      String   // Store the relative path to the file
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  questions  Question[]
}

model Feedback {
  id                  Int     @id @default(autoincrement())
  relevanceAccuracy   Int     // 1-5 scale
  easeOfUse           Int     // 1-5 scale
  learningOutcomes    Int     // 1-5 scale
  feedbackAssessment  Int     // 1-5 scale
  userSatisfaction    Int     // 1-5 scale
  recommendationLikely Int    // 1-5 scale
  additionalComments  String? // Optional field for any additional comments
  createdAt           DateTime @default(now())

  @@map("feedbacks")
}
